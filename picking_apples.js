/*
First time? Check out the tutorial game:
https://sprig.hackclub.com/gallery/getting_started
*/

const sky = "s"
const player = "p";
const obstacle = "o";

let gameOver = false;

let score = 0;
let miss = 5;
let timer = 0;
const hit = tune`
500,
500: F5^500 + A4^500,
15000`;
const gameOverTune = tune`
60.120240480961925: C5^60.120240480961925 + E5/60.120240480961925 + G5~60.120240480961925 + B5-60.120240480961925,
60.120240480961925: C5^60.120240480961925 + B4^60.120240480961925 + A4^60.120240480961925 + E5/60.120240480961925 + G5~60.120240480961925,
60.120240480961925: A4^60.120240480961925 + G4^60.120240480961925 + E5/60.120240480961925 + D5/60.120240480961925 + G5~60.120240480961925,
60.120240480961925: F4^60.120240480961925 + D5/60.120240480961925 + C5/60.120240480961925 + F5~60.120240480961925 + A5-60.120240480961925,
60.120240480961925: F4^60.120240480961925 + E4^60.120240480961925 + C5/60.120240480961925 + B4/60.120240480961925 + F5~60.120240480961925,
60.120240480961925: E4^60.120240480961925 + D4^60.120240480961925 + B4/60.120240480961925 + E5~60.120240480961925 + G5-60.120240480961925,
60.120240480961925: D4^60.120240480961925 + C4^60.120240480961925 + A4/60.120240480961925 + G4/60.120240480961925 + E5~60.120240480961925,
60.120240480961925: C4^60.120240480961925 + G4/60.120240480961925 + F4/60.120240480961925 + D5~60.120240480961925 + C5~60.120240480961925,
60.120240480961925: E4/60.120240480961925 + B4~60.120240480961925 + A4~60.120240480961925 + F5-60.120240480961925 + A5-60.120240480961925,
60.120240480961925: E4/60.120240480961925 + D4/60.120240480961925 + G4~60.120240480961925 + F5-60.120240480961925 + E5-60.120240480961925,
60.120240480961925: D4/60.120240480961925 + C4/60.120240480961925 + F4~60.120240480961925 + E5-60.120240480961925 + D5-60.120240480961925,
60.120240480961925: E4~60.120240480961925 + C5-60.120240480961925 + D5-60.120240480961925 + A5-60.120240480961925 + G5-60.120240480961925,
60.120240480961925: E4~60.120240480961925 + D4~60.120240480961925 + C4~60.120240480961925 + B4-60.120240480961925 + C5-60.120240480961925,
60.120240480961925: C4~60.120240480961925 + A4-60.120240480961925 + G4-60.120240480961925 + C5-60.120240480961925 + E5-60.120240480961925,
60.120240480961925: F4-60.120240480961925 + B4-60.120240480961925 + E5-60.120240480961925 + D5-60.120240480961925 + B5-60.120240480961925,
60.120240480961925: E4-60.120240480961925 + D4-60.120240480961925 + B4-60.120240480961925 + D5-60.120240480961925 + C5-60.120240480961925,
60.120240480961925: C4-60.120240480961925 + A4-60.120240480961925 + C5-60.120240480961925 + G5-60.120240480961925 + D5-60.120240480961925,
60.120240480961925: A4-60.120240480961925 + C5-60.120240480961925 + B5-60.120240480961925 + G5-60.120240480961925 + D5-60.120240480961925,
60.120240480961925: G4-60.120240480961925 + B4-60.120240480961925 + A5-60.120240480961925 + F5-60.120240480961925 + C5-60.120240480961925,
60.120240480961925: F4-60.120240480961925 + A4-60.120240480961925 + G5-60.120240480961925 + E5-60.120240480961925 + B4-60.120240480961925,
60.120240480961925: F4-60.120240480961925 + G4-60.120240480961925 + E5-60.120240480961925 + F5-60.120240480961925 + D5-60.120240480961925,
60.120240480961925: E4-60.120240480961925 + F4-60.120240480961925 + D5-60.120240480961925 + E5-60.120240480961925 + A4-60.120240480961925,
60.120240480961925: E4-60.120240480961925 + C5-60.120240480961925 + D5-60.120240480961925 + A4-60.120240480961925 + B4-60.120240480961925,
60.120240480961925: D4-60.120240480961925 + E4-60.120240480961925 + B4-60.120240480961925 + C5-60.120240480961925 + A4-60.120240480961925,
60.120240480961925: D4-60.120240480961925 + A4-60.120240480961925 + B4-60.120240480961925 + D5-60.120240480961925,
60.120240480961925: C4-60.120240480961925 + G4-60.120240480961925 + A4-60.120240480961925 + C5-60.120240480961925 + B4-60.120240480961925,
60.120240480961925: F4-60.120240480961925 + G4-60.120240480961925 + A4-60.120240480961925 + C5-60.120240480961925 + B4-60.120240480961925,
60.120240480961925: E4-60.120240480961925 + F4-60.120240480961925 + A4-60.120240480961925 + C5-60.120240480961925 + B4-60.120240480961925,
60.120240480961925: C4-60.120240480961925 + D4-60.120240480961925 + C5-60.120240480961925 + B4-60.120240480961925 + F4-60.120240480961925,
60.120240480961925: C5-60.120240480961925 + D5-60.120240480961925,
120.24048096192385`;
const missed = tune`
86.20689655172414: B4-86.20689655172414,
86.20689655172414: A5-86.20689655172414,
86.20689655172414: B4-86.20689655172414,
2500`;

setLegend(
    [ obstacle, bitmap`
................
...........4D...
.......C..4D....
.......C.4D.....
.......C4D......
....3333333.....
...333333333....
..33333333333...
..33333333333...
..33333333333...
..33333333333...
..33333333333...
..33333333333...
..33333333333...
...333333333....
....3333333.....`],

  [ player, bitmap`
444..........444
444..........444
444..........444
444..........444
444..........444
444..........444
444..........444
444..........444
444..........444
444..........444
444..........444
444..........444
4443333333333444
4443333333333444
4443333333333444
4443333333333444`],

   [ sky, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................`]
);


const level = map`
ssssssssssss
ssssssssssss
ssssssssssss
ssssssssssss
ssssssssssss
ssssssssssss
ssssssssssss
ssssssssssss
ssssssssssss
ssssssssssss
ssssssssssss
psssssssssss`;
const clear = map`
............
............
............
............
............
............
............
............
............
............
............
............`;

let obstacles = [];

setMap(level);

const obstacleSpawn = setInterval(() => {
  // generate obstacles
  let x = Math.floor(Math.random() * 12);
  let found = false;
  for(let i = 0; i < obstacles.length; ++i) {
    if(obstacles[i][0] == x && obstacles[i][1] == 0 || obstacles[i][0] == x && obstacles[i][1] == 1) {
      found = true;
    }
  }
  if(!found) {
    addSprite(x, 0, obstacle);
    obstacles.push([x, 0]);
  }
}, 2500);

const obstacleUpdate = setInterval(() => {
  for(let i = 0; i < obstacles.length; ++i) {
    let pos = obstacles[i];
    let tile = getTile(...pos);
    if(tile.length > 0) {
      tile[0].y += 1;
      obstacles[i][1] += 1;
    }
  }
  
  let toRemove = [];
  
  for(let i = 0; i < obstacles.length; ++i) {
    let playerPos = getFirst(player);
    let playerX = playerPos.x;
    let playerY = playerPos.y;
    if(obstacles[i][0] == playerX && obstacles[i][1] >= playerY - 1) {
      playTune(hit);
      score += 1;
      toRemove.push(i);
      
    }
  }
  for(let i = 0; i < obstacles.length; ++i) {
    if(obstacles[i][1] == getFirst(player).y) {
      toRemove.push(i);
      miss -= 1;
      playTune(missed);
    }
  }
  for(let i = 0; i < toRemove.length; ++i) {
    getTile(...obstacles[toRemove[i]]).forEach(item => {
      if(item != null && item.type != "p") {
        item.y = getFirst(player).y;
        setTimeout(() => {
          item.remove();
          obstacles.splice(toRemove[i], 1);
        }, 100);
      }
    });
  }

  clearText();
   addText(`Score: ${score}`, { x : 1, y : 0});
  addText(`Misses: ${miss}`, { x : 10, y : 0});

  // Ending Game
  if(miss <= 0) {
    clearText();
    setMap(clear);
    clearInterval(obstacleUpdate);
    clearInterval(obstacleSpawn);
    addText("Game Over", { x : 5, y : 5});
    addText(`Score: ${score}`, { x : 5, y : 7});
    playTune(gameOverTune);
    gameOver = true;
  }
  timer++;
}, 200);

onInput("a", () => {
  if(!gameOver) {
    getFirst(player).x -= 1;
  }
});

onInput("d", () => {
  if(!gameOver) {
    getFirst(player).x += 1;
  }
});
1